# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(estimatr)
library(fabricatr)
# Chunk 2
q1 <- tibble(
group = c("Turnout Rate among those contacted",
"Turnout Rate among those not contacted",
"Overall Turnout Rate"),
treatment = c(54.43, 36.48, 41.38),
t_numbers = c(395, 1050, 1445),
control = c(NA, 37.54, 37.54),
c_numbers = c(NA, 5645, 5645)
)
# Chunk 3
hyde <- read_csv("~/Desktop/Hyde_POP_2012.csv")
ITT <- lm_robust(invalidballots ~ observed, data = hyde) %>%
tidy()%>%
filter(term == "observed")%>%
select(estimate)%>%
pull()
ITT
# Chunk 4
ITT_D <- lm_robust(observed ~ Sample, data = hyde)%>%
tidy()%>%
filter(term =="Sample")%>%
select(estimate)%>%
pull()
ITT_D
# Chunk 5
CACE <- ITT/ITT_D
CACE
# Chunk 6
set.seed(1234567) # Not required here, but will give exact match
### Step 1, figure out the treatment allocation scheme
N_treat <- sum(hyde$observed == 1)
N_control <- nrow(hyde) - N_treat
N_total <- N_treat + N_control
N_treat
N_control
N_total
# Chunk 7
## There are 89 treated units and 1882 control units
## Adapt our treatment assignment function
get_treatment_assignment <- function(){
random_treat <- sample(
x = c(rep(1, 89),
rep(0, 1882)),
size = 1971,
replace = F)
}
## Nothing needs to change with these functions because they
## are general enough. We just need to be
get_ate <- function(df, y, d){
## Get groups
y1 <- df[[y]][d == 1]
y0 <- df[[y]][d == 0]
## Conditional Expected Values
E_Y1 <- mean(y1, na.rm = T)
E_Y0 <- mean(y0, na.rm = T)
# Return the difference in means
return(E_Y1 - E_Y0)
}
sim_dm <- function(df, y){
d <- get_treatment_assignment()
get_ate(df, y, d = d)
}
dm <- NULL
num_perms <- 10000
for(i in 1:num_perms){
dm[i] <- sim_dm(hyde, "invalidballots")
}
sum(abs(dm) >= abs(ITT))/num_perms
# Chunk 8
library(ri2)
declaration <- declare_ra(N = nrow(hyde), m = N_treat)
ri2_out <- conduct_ri(
formula =  invalidballots ~ observed,
declaration = declaration,
assignment = "observed",
sharp_hypothesis = 0,
data = hyde
)
summary(ri2_out)
hyde <- read_csv("~/Desktop/github/BerkeleyAppliedCausalInference/problem_sets/PSets/PS3/Hyde_POP_2012.csv")
Z <- as.integer(hyde$Sample)
Y <- hyde$invalidballots
D <- as.numeric(hyde$observed=="yes")
library(ri)
library(ri2)
probs <- genprobexact(Z)
probs
Z
library(ri2)
declaration <- declare_ra(N = nrow(hyde), m = N_treat)
ri2_out <- conduct_ri(
formula =  invalidballots ~ observed,
declaration = declaration,
assignment = "observed",
sharp_hypothesis = 0,
data = hyde
)
summary(ri2_out)
declare_ra(N = nrow(hyde), m = D)
declare_ra(N = nrow(hyde), m = sum(D))
D
D <- hyde$observed
sum(D)
ITT <- estate(Y,Z, prob = genprobexact(Z))
ITT
ITTd <- estate(D, Z, prob = genprobexact(Z))
ITTd
hyde <- read_csv("~/Desktop/github/BerkeleyAppliedCausalInference/problem_sets/PSets/PS3/Hyde_POP_2012.csv")
ITT <- lm_robust(invalidballots ~ observed, data = hyde) %>%
tidy()%>%
filter(term == "observed")%>%
select(estimate)%>%
pull()
ITT
ITT_D <- lm_robust(observed ~ Sample, data = hyde)%>%
tidy()%>%
filter(term =="Sample")%>%
select(estimate)%>%
pull()
ITT_D
CACE <- ITT/ITT_D
CACE
hyde <- read_csv("~/Desktop/github/BerkeleyAppliedCausalInference/problem_sets/PSets/PS3/Hyde_POP_2012.csv")
ITT <- lm_robust(invalidballots ~ Sample, data = hyde) %>%
tidy()%>%
filter(term == "Sample")%>%
select(estimate)%>%
pull()
ITT
ITT <- lm_robust(invalidballots ~ Sample, data = hyde) %>%
tidy()%>%
filter(term == "Sample")%>%
select(estimate)%>%
pull()
ITT <- lm_robust(invalidballots ~ Sample, data = hyde) %>%
tidy()%>%
filter(term == "Sample")%>%
select(estimate)%>%
pull()
ITT
CACE <- ITT/ITT_D
CACE
set.seed(1234567) # Not required here, but will give exact match
### Step 1, figure out the treatment allocation scheme
N_treat <- sum(hyde$observed == 1)
N_control <- nrow(hyde) - N_treat
N_total <- N_treat + N_control
N_treat
N_control
N_total
sum(Z)
length(Z)-409
1562+409
## There are 89 treated units and 1882 control units
## Adapt our treatment assignment function
get_treatment_assignment <- function(){
random_treat <- sample(
x = c(rep(1, 409),
rep(0, 1562)),
size = 1971,
replace = F)
}
## Nothing needs to change with these functions because they
## are general enough. We just need to be
get_ate <- function(df, y, d){
## Get groups
y1 <- df[[y]][d == 1]
y0 <- df[[y]][d == 0]
## Conditional Expected Values
E_Y1 <- mean(y1, na.rm = T)
E_Y0 <- mean(y0, na.rm = T)
# Return the difference in means
return(E_Y1 - E_Y0)
}
sim_dm <- function(df, y){
d <- get_treatment_assignment()
get_ate(df, y, d = d)
}
dm <- NULL
num_perms <- 10000
for(i in 1:num_perms){
dm[i] <- sim_dm(hyde, "invalidballots")
}
sum(abs(dm) >= abs(ITT))/num_perms
library(ri2)
declaration <- declare_ra(N = nrow(hyde), m = N_treat)
ri2_out <- conduct_ri(
formula =  invalidballots ~ Sample,
declaration = declaration,
assignment = "Sample",
sharp_hypothesis = 0,
data = hyde
)
summary(ri2_out)
library(ri2)
declaration <- declare_ra(N = nrow(hyde), m = 409)
ri2_out <- conduct_ri(
formula =  invalidballots ~ Sample,
declaration = declaration,
assignment = "Sample",
sharp_hypothesis = 0,
data = hyde
)
summary(ri2_out)
