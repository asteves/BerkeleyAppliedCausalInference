set.seed(42)
data <- tibble(
N = 1:100,
YiD0 = rnorm(100),
YiD1 = YiD0 + 5,
diZ0 = c(rep(0,100)),
diZ1 = sample(c(rep(0,30), rep(1,70)), 100, F),
Type = if_else(diZ1 == 1, 1, 0)
)
library(tidyverse)
set.seed(42)
data <- tibble(
N = 1:100,
YiD0 = rnorm(100),
YiD1 = YiD0 + 5,
diZ0 = c(rep(0,100)),
diZ1 = sample(c(rep(0,30), rep(1,70)), 100, F),
Type = if_else(diZ1 == 1, 1, 0)
)
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(estimatr)
library(fabricatr)
1849/2
1015/2
591/1015
507*.58
21849-1015
1849-1015
834+1430
hyde <- read_csv("~/Desktop/Hyde_POP_2012.csv")
library(estimatr)
lm_robust(invalidballots ~ observed, data = hyde)
tidy(lm_robust(invalidballots ~ observed, data = hyde))
ITT_D <- lm_robust(observed ~ sample, data = hyde)%>%
tidy()%>%
filter(term = "sample")%>%
pull()
ITT_D
ITT_D <- lm_robust(observed ~ Sample, data = hyde)%>%
tidy()%>%
filter(term = "Sample")%>%
pull()
ITT_D
ITT_D <- lm_robust(observed ~ Sample, data = hyde)%>%
tidy()%>%
filter(term =="Sample")%>%
pull()
ITT_D
ITT_D <- lm_robust(observed ~ Sample, data = hyde)%>%
tidy()%>%
filter(term =="Sample")%>%
pull()
ITT_D
ITT <- lm_robust(invalidballots ~ observed, data = hyde) %>%
tidy()%>%
filter(term = "observed")%>%
pull()
ITT
ITT
ITT <- lm_robust(invalidballots ~ observed, data = hyde) %>%
tidy()%>%
filter(term == "observed")%>%
pull()
ITT
ITT <- lm_robust(invalidballots ~ observed, data = hyde) %>%
tidy()%>%
filter(term == "observed")%>%
select(estimate)%>%
pull()
ITT
ITT_D <- lm_robust(observed ~ Sample, data = hyde)%>%
tidy()%>%
filter(term =="Sample")%>%
select(estimate)%>%
pull()
ITT_D
CACE <- ITT/ITT_D
CACE
### Step 1, figure out the treatment allocation scheme
sum(observed == 1)
### Step 1, figure out the treatment allocation scheme
sum(hyde$observed == 1)
View(hyde)
N_control <- 1 - N_treat
### Step 1, figure out the treatment allocation scheme
N_treat <- sum(hyde$observed == 1)
N_control <- 1 - N_treat
N_control <- nrow(hyde) - N_treat
89+1882
print(N_treat, N_control, N_total)
N_total <- N_treat + N_control
print(N_treat, N_control, N_total)
print(N_total)
ITT
## There are 89 treated units and 1882 control units
## Adapt our treatment assignment function
get_treatment_assignment <- function(){
random_treat <- sample(
x = c(rep(1, 89),
rep(0, 1882)),
size = 1971,
replace = F)
}
## Nothing needs to change with these functions because they
## are general enough. We just need to be
get_ate <- function(df, y, d){
## Get groups
y1 <- df[[y]][d == 1]
y0 <- df[[y]][d == 0]
## Conditional Expected Values
E_Y1 <- mean(y1, na.rm = T)
E_Y0 <- mean(y0, na.rm = T)
# Return the difference in means
return(E_Y1 - E_Y0)
}
sim_dm <- function(df, y){
d <- get_treatment_assignment()
get_ate(df, y, d = d)
}
dm <- NULL
num_perms <- 10000
for(i in 1:num_perms){
dm[i] <- sim_dm(df, "invalidballots")
}
sum(abs(dm) >= abs(ITT))/num_perms
## There are 89 treated units and 1882 control units
## Adapt our treatment assignment function
get_treatment_assignment <- function(){
random_treat <- sample(
x = c(rep(1, 89),
rep(0, 1882)),
size = 1971,
replace = F)
}
## Nothing needs to change with these functions because they
## are general enough. We just need to be
get_ate <- function(df, y, d){
## Get groups
y1 <- df[[y]][d == 1]
y0 <- df[[y]][d == 0]
## Conditional Expected Values
E_Y1 <- mean(y1, na.rm = T)
E_Y0 <- mean(y0, na.rm = T)
# Return the difference in means
return(E_Y1 - E_Y0)
}
sim_dm <- function(df, y){
d <- get_treatment_assignment()
get_ate(df, y, d = d)
}
dm <- NULL
num_perms <- 10000
for(i in 1:num_perms){
dm[i] <- sim_dm(hyde, "invalidballots")
}
sum(abs(dm) >= abs(ITT))/num_perms
View(dm)
dm
sum(dm >= (ITT)/num_perms
()
)
sum(dm >= (ITT))/num_perms
sum(dm <= (ITT))/num_perms
sum(dm >= abs(ITT))/num_perms
sum(abs(dm) >= abs(ITT))/num_perms
sim_dm <- function(df, y){
d <- get_treatment_assignment()
print(d)
get_ate(df, y, d = d)
}
dm <- NULL
num_perms <- 10000
for(i in 1:num_perms){
dm[i] <- sim_dm(hyde, "invalidballots")
}
set.seed(1234567) # Not required here, but will give exact match
### Step 1, figure out the treatment allocation scheme
N_treat <- sum(hyde$observed == 1)
N_control <- nrow(hyde) - N_treat
N_total <- N_treat + N_control
N_treat
N_control
N_total
## There are 89 treated units and 1882 control units
## Adapt our treatment assignment function
get_treatment_assignment <- function(){
random_treat <- sample(
x = c(rep(1, 89),
rep(0, 1882)),
size = 1971,
replace = F)
}
## Nothing needs to change with these functions because they
## are general enough. We just need to be
get_ate <- function(df, y, d){
## Get groups
y1 <- df[[y]][d == 1]
y0 <- df[[y]][d == 0]
## Conditional Expected Values
E_Y1 <- mean(y1, na.rm = T)
E_Y0 <- mean(y0, na.rm = T)
# Return the difference in means
return(E_Y1 - E_Y0)
}
sim_dm <- function(df, y){
d <- get_treatment_assignment()
get_ate(df, y, d = d)
}
dm <- NULL
num_perms <- 10000
for(i in 1:num_perms){
dm[i] <- sim_dm(hyde, "invalidballots")
}
sum(abs(dm) >= abs(ITT))/num_perms
library(ri)
library(ri2)
library(ri2)
declaration <- declare_ra(N = nrow(hyde), m = N_treat)
library(ri2)
declaration <- declare_ra(N = nrow(hyde), m = N_treat)
ri2_out <- conduct_ri(
formula =  invalidballots~ observed,
declaration = declaration,
sharp_hypothesis = 0,
data = hyde
)
summary(ri2_out)
ri2_out <- conduct_ri(
formula =  invalidballots ~ observed,
declaration = declaration,
assignment = "observed",
sharp_hypothesis = 0,
data = hyde
)
summary(ri2_out)
sum(abs(dm) >= abs(ITT))/num_perms
# Chunk 1
library(tidyverse)
## Put code for data frame here
data <- tibble(
Z = c(rep("baseline", 2572), rep("treatment", 486+2086), rep("placebo", 470+2109)),
D = c(rep(0,2572), rep(1, 486), rep(0, 2086), rep(1,470), rep(0,2109)),
Y = c(rep(1, round(2572*0.3122)), rep(0, round(2572*(1-0.3122))),
rep(1, round(486*0.3909)), rep(0, round(486*(1-0.3909))),
rep(1, round(2086*0.3274)), rep(0, round(2086*(1-0.3274))),
rep(1, round(470*0.2979)), rep(0, round(470*(1-.2979))),
rep(1, round(2109*0.3215)), rep(0, round(2109*(1-0.3215)))
)
)
# Chunk 2
mean(data$D[data$Z == "treatment"])
# Chunk 3
mean(data$D[data$Z == "placebo"])
# Chunk 4
z_score <- (.182-189)/sd(data$D[data$Z == "treatment"])
pnorm(z_score)
# Chunk 5
itt <- mean(data$Y[data$Z=="treatment"])-mean(data$Y[data$Z =="baseline"])
cace <- itt/ mean(data$D[data$Z == "treatment"])
cace
# Chunk 6
cace_2 <- mean(data$Y[data$Z == "treatment" & data$D == 1]) - mean(data$Y[data$Z == "placebo" & data$D == 1])
486+2086
1-.8177
mean(data$Y[data$Z=="treatment"])
library(tidyverse)
## Put code for data frame here
data <- tibble(
Z = c(rep("baseline", 2572), rep("treatment", 486+2086), rep("placebo", 470+2109)),
D = c(rep(0,2572), rep(1, 486), rep(0, 2086), rep(1,470),
rep(0,2109)),
Y = c(rep(1, round(2572*0.3122)), rep(0, round(2572*(1-0.3122))),
rep(1, round(486*0.3909)), rep(0, round(486*(1-0.3909))),
rep(1, round(2086*0.3274)), rep(0, round(2086*(1-0.3274))),
rep(1, round(470*0.2979)), rep(0, round(470*(1-.2979))),
rep(1, round(2109*0.3215)), rep(0, round(2109*(1-0.3215)))
)
)
mean(data$D[data$Z == "treatment"])
mean(data$D[data$Z == "placebo"])
z_score <- (.182-189)/sd(data$D[data$Z == "treatment"])
pnorm(z_score)
mean(data$Y[data$Z=="treatment"])
mean(data$Y[data$Z =="baseline"])
itt <- mean(data$Y[data$Z=="treatment"])-mean(data$Y[data$Z =="baseline"])
mean(data$D[data$Z == "treatment"])
itt <- mean(data$Y[data$Z=="treatment"])-mean(data$Y[data$Z =="baseline"])
cace <- itt/ mean(data$D[data$Z == "treatment"])
cace
cace_2 <- mean(data$Y[data$Z == "treatment" & data$D == 1]) - mean(data$Y[data$Z == "placebo" & data$D == 1])
case_2
cace_2
estimatr::iv_robust(Y~D|Z, data = data)
