xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
pagedown::chrome_print("~/Desktop/github/BerkeleyAppliedCausalInference/course_materials/Lectures/Lecture6.html", "~/Desktop/github/BerkeleyAppliedCausalInference/course_materials/Lectures/LecturePdfs/Lecture6.pdf")
warnings()
pagedown::chrome_print("~/Desktop/github/BerkeleyAppliedCausalInference/course_materials/Lectures/Lecture6.html", "~/Desktop/github/BerkeleyAppliedCausalInference/course_materials/Lectures/LecturePdfs/Lecture6.pdf")
library(tidyverse)
df <- read_csv("~/Desktop/github/BerkeleyAppliedCausalInference/course_materials/Sections/Section3/data/riExample.csv")
df$id
df[["id"]]
df[,1]
df$id[df$assign==1]
df[["id"]][df[["assign"]]==1]
df[,1][df[,4]==1]
example_vec <- c(0,0,0,1,1,0,0)
df$id[example_vec == 1]
df[["id"]][example_vec == 1]
df[,1][example_vec ==1]
d2 <- data.frame(df)
d2[,1][example_vec == 1]
df[,1]
df[,1][example_vec == 1]
#### For loops
for(i in 1:10){
print(i)
}
## Store value
val <- NULL
for(i in 1:10){
val[i] <- i
}
val
for(i in 1:10){
val[i] <- i
}
val <- NULL
for(i in 1:10){
val[i] <- i
}
sum(val)
# Run the experiment with the allocation given
treat <- mean(df[["y1"]][df[["assign"]] ==1], na.rm = T)
control <- mean(df[["y0"]][df[["assign"]] ==0], na.rm = T)
est_ATE <- treat-control
est_ATE
## Unique combinations
choose(7,2)
## For loop for all possible treatment assignments
all_possible_assign <- matrix(nrow = 100, ncol =7)
for(i in 1:100){
all_possible_assign[i,] <- sample(c(rep(1,2), rep(0,5)), 7, replace = F)
}
## Get unique rows
unique_treats <- unique(all_possible_assign)
dim(unique_treats)[1,]
dim(unique_treats)[1,] == 21
dim(unique_treats)[1] == 21
unique_treats
get_ate <- function(df, y1,
y0, d){
## Get groups
y1 <- df[[y1]][d == 1]
y0 <- df[[y0]][d == 0]
## Conditional Expected Values
E_Y1 <- mean(y1, na.rm = T)
E_Y0 <- mean(y0, na.rm = T)
# Return
#the difference in means
return(E_Y1 - E_Y0)
}
ex_df <- tibble(
id = 1:8,
y0 = seq(from = 1, to = 15, by =2),
y1 = y0 + 2
)
get_ate(df = ex_df, y1= "y1",
y0="y0", d = example_vec)
set.seed(42)
example_vec <- c(0,0,0,0, 1,1,1,1)
ex_df <- tibble(
id = 1:8,
y0 = seq(from = 1, to = 15, by =2),
y1 = y0 + 2
)
get_ate(df = ex_df, y1= "y1",
y0="y0", d = example_vec)
example_vec <- c(0,0,0,0, 1,1,1,1)
ex_df <- tibble(
id = 1:8,
y0 = seq(from = 1, to = 15, by =2),
y1 = y0 + 2
)
get_ate(df = ex_df, y1= "y1",
y0="y0", d = example_vec)
set.seed(42)
example_vec <- c(0,0,0,0, 1,1,1,1)
ex_df <- tibble(
id = 1:8,
y0 = seq(from = 1, to = 15, by =2),
y1 = y0 + 2
)
get_ate(df = ex_df, y1= "y1",
y0="y0", d = example_vec)
ex_df
1 +3 + 5+ 7
16/4
(11+13+15+17)/4
14-4
ex1 <- tibble(
id = 1:7,
y0 = c(15,15,20,20,10,15,30),
y1 = y0
)
ex2 <- df %>%
mutate(y0 = ifelse(is.na(y0),
y1,
y0),
y1 = ifelse(is.na(y1),
y0,
y1))
ex1==ex2
ex1
ex2
ex2 <- df %>%
mutate(y0 = ifelse(is.na(y0),
y1,
y0),
y1 = ifelse(is.na(y1),
y0,
y1))%>%
select(-assign)
ex1 == ex2
ex3 <- df
ex3$y0 <- ifelse(is.na(ex3$y0),
ex3$y1, ex3$y0)
ex3$y1 <- ifelse(is.na(ex3$y1),
ex3$y0, ex3$y0)
ex2 == ex3
ex3
ex3[, c(id, y0, y1)]
ex3[, c("id", "y0", "y1")]
ex3[, c("id", "y0", "y1")] == ex2
ex2
## Get randomization distribution
obs_ate <- 6.5
dm <- NULL
for(i in 1:nrow(unique_treats)){
dm[i] <- get_ate(null_df, "y1", "y0", d = unique_treats[i,])
}
## Get randomization distribution
obs_ate <- 6.5
null_df <- df %>%
mutate(y0 = ifelse(is.na(y0),
y1,
y0),
y1 = ifelse(is.na(y1),
y0,
y1))%>%
# remove the assign column
select(-assign)
## Get randomization distribution
obs_ate <- 6.5
dm <- NULL
for(i in 1:nrow(unique_treats)){
dm[i] <- get_ate(null_df, "y1", "y0", d = unique_treats[i,])
}
sum(dm >=obs_ate)/nrow(unique_treats)
mean(dm >= obs_ate)
sum(abs(dm)>=obs_ate)/nrow(unique_treats)
mean(abs(dm)>=obs_ate)
ggplot(tibble(dm = dm))+
geom_point(mapping = aes(x = dm))
ggplot(tibble(dm = dm))+
geom_point(mapping = aes(y = dm))
ggplot(tibble(x = 1:21,dm = dm))+
geom_point(mapping = aes(x = x,y = dm))
ggplot(tibble(x = 1:21,dm = dm))+
geom_point(mapping = aes(x = x,y = dm))+
geom_hline(yintercept = obs_ate)
ggplot(tibble(x = 1:21,dm = abs(dm)))+
geom_point(mapping = aes(x = x,y = dm))+
geom_hline(yintercept = obs_ate)
## Get randomization distribution
set.seed(42)
obs_ate <- 6.5
dm <- NULL
for(i in 1:nrow(unique_treats)){
dm[i] <- get_ate(null_df, "y1", "y0", d = unique_treats[i,])
}
sum(dm >=obs_ate)/nrow(unique_treats)
mean(dm >= obs_ate)
sum(abs(dm)>=obs_ate)/nrow(unique_treats)
mean(abs(dm)>=obs_ate)
ggplot(tibble(x = 1:21,dm = abs(dm)))+
geom_point(mapping = aes(x = x,y = dm))+
geom_hline(yintercept = obs_ate)
df <- read_csv("~/Desktop/github/BerkeleyAppliedCausalInference/course_materials/Sections/Section3/data/riExample.csv")
