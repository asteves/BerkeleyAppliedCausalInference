knitr::opts_chunk$set(echo = TRUE)
samples %>%
as_tibble(.,.name_repair = "universal")%>%
# this line of code takes the result of the .name_repair
# replaces the ... with the string run-
rename_with(~(gsub("...", "run-", .x, fixed =TRUE)))%>%
mutate(flips = row_number())%>%
pivot_longer(
cols = -flips,
names_to = "run",
values_to = "values"
) %>%
ggplot(aes(flips, values, group= run, color = run))+
geom_line()+
ylab("Proportion of Heads")+
xlab("Flips")+
geom_hline(yintercept = 0.5)+
ggtitle("Weak Law of Large Numbers Simulation")
library(dplyr)
library(ggplot2)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
generate_sequence <- function(N){
# Function to generate coin flip sequences
# N = length of sequence
seq <- rbinom(N, 1, p = 0.5)
index <-c(1:N)
return(cumsum(seq)/index)
}
N <- 10000
samples <- matrix(0, N, 9) # Make a 100x9 matrix with all zeros
set.seed(42)
for(i in 1:9){
samples[,i] <- generate_sequence(N)
}
samples %>%
as_tibble(.,.name_repair = "universal")%>%
# this line of code takes the result of the .name_repair
# replaces the ... with the string run-
rename_with(~(gsub("...", "run-", .x, fixed =TRUE)))%>%
mutate(flips = row_number())%>%
pivot_longer(
cols = -flips,
names_to = "run",
values_to = "values"
) %>%
ggplot(aes(flips, values, group= run, color = run))+
geom_line()+
ylab("Proportion of Heads")+
xlab("Flips")+
geom_hline(yintercept = 0.5)+
ggtitle("Weak Law of Large Numbers Simulation")
samples %>%
as_tibble(.,.name_repair = "universal")%>%
# this line of code takes the result of the .name_repair
# replaces the ... with the string run-
rename_with(~(gsub("...", "run-", .x, fixed =TRUE)))%>%
mutate(flips = row_number())%>%
pivot_longer(
cols = -flips,
names_to = "run",
values_to = "values"
) %>%
ggplot(aes(flips, values, group= run, color = run))+
geom_line()+
ylab("Proportion of Heads")+
xlab("Flips")+
geom_hline(yintercept = 0.5)+
scale_color_ordinal()+
ggtitle("Weak Law of Large Numbers Simulation")
samples %>%
as_tibble(.,.name_repair = "universal")%>%
# this line of code takes the result of the .name_repair
# replaces the ... with the string run-
rename_with(~(gsub("...", "run-", .x, fixed =TRUE)))%>%
mutate(flips = row_number())%>%
pivot_longer(
cols = -flips,
names_to = "run",
values_to = "values"
) %>%
ggplot(aes(flips, values, group= run, color = run))+
geom_line()+
ylab("Proportion of Heads")+
xlab("Flips")+
geom_hline(yintercept = 0.5)+
scale_color_brewer()+
ggtitle("Weak Law of Large Numbers Simulation")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
f <- function(x, p1 = 0.5, p2 = 1 - p1, m1, m2)
p1 * dnorm(x, m1) + p2 * dnorm(x, m2)
f(10)
f(10, m1 = 10, m2 = 10)
rbinom(100)
sim1 <- matrix(100, 10, 100)
View(sim1)
sim1 <- matrix(10, 10, 100)
# Function to simulate different sample mean sizes
sim <- vector(mode = "numeric", length = 100L)
View(sim1)
simulate <- function(N, dist){
# Function to simulate different sample mean sizes
# N = sample size
# dist = probability distribution, can be "normal", "unif", "binom"
sim <- vector(mode = "numeric", length = 100L)
for(i in 1:100){
sim[i] <- mean(sample_from_dist(N, dist))
}
return(sim)
}
simulate(10, "normal")
sample_from_dist(N, dist){
sample_from_dist(N, dist){
sample_from_dist<- function(N, dist){
# A wrapper function to sample from different distributions
if(dist = "normal"){
sample_from_dist<- function(N, dist){
# A wrapper function to sample from different distributions
# N = sample size
# dist = probability distribution, can be "normal", "unif", "binom"
if(dist == "normal"){
s <- rnorm(N, 100, 10)
}
if(dist == "unif"){
s <- runif(N)
}
if(dist == "binom"){
s <- rbinom(N, 1, prob = 0.5)
}
return(s)
}
simulate <- function(N, dist){
# Function to simulate different sample mean sizes
# N = sample size
# dist = probability distribution, can be "normal", "unif", "binom"
sim <- vector(mode = "numeric", length = 100L)
for(i in 1:100){
sim[i] <- mean(sample_from_dist(N, dist))
}
return(sim)
}
simulate(10, "normal")
plot(simulate(10, "normal"))
dens(simulate(10, "normal"))
demo <- tibble(
X_10 <- simulate(10, "unif"),
X_100 <- simulate(100, "unif"),
X_1000 <- simulate(1000, "unif")
)
View(demo)
demo <- tibble(
X_10 = simulate(10, "unif"),
X_100 = simulate(100, "unif"),
X_1000 = simulate(1000, "unif")
)
View(demo)
demo %>%
pivot_longer(
cols = everything(),
names_to = "samples",
values_to = "values"
)%>%
ggplot(aes(values))+
geom_histogram()
demo %>%
pivot_longer(
cols = everything(),
names_to = "samples",
values_to = "values"
)%>%
ggplot(aes(values))+
geom_histogram()+
facet_wrap(~samples)
demo %>%
pivot_longer(
cols = everything(),
names_to = "samples",
values_to = "values"
)%>%
ggplot(aes(values))+
geom_density()+
facet_wrap(~samples)
demo <- tibble(
X_10 = simulate(10, "unif"),
X_100 = simulate(100, "unif"),
X_1000 = simulate(1000, "unif")
)
demo %>%
pivot_longer(
cols = everything(),
names_to = "samples",
values_to = "values"
)%>%
ggplot(aes(values))+
geom_density()+
facet_wrap(~samples)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
library(dplyr)
library(kableExtra)
df %>%
mutate(across(everything(), ~round(.x, 3)))
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
library(dplyr)
library(knitr)
library(kableExtra)
